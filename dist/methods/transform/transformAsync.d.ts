/** @noSelfInFile */
import type { AnySchema, AnySchemaAsync, ArraySchema, ArraySchemaAsync, BigintSchema, BigintSchemaAsync, BooleanSchema, BooleanSchemaAsync, EnumSchema, EnumSchemaAsync, LiteralSchema, LiteralSchemaAsync, MapSchema, MapSchemaAsync, NanSchema, NanSchemaAsync, NativeEnumSchema, NativeEnumSchemaAsync, NeverSchema, NeverSchemaAsync, NonNullableSchema, NonNullableSchemaAsync, NonNullishSchema, NonNullishSchemaAsync, NonOptionalSchema, NonOptionalSchemaAsync, NullSchema, NullSchemaAsync, NullableSchema, NullableSchemaAsync, NullishSchema, NullishSchemaAsync, NumberSchema, NumberSchemaAsync, ObjectSchema, ObjectSchemaAsync, OptionalSchema, OptionalSchemaAsync, RecordSchema, RecordSchemaAsync, RecursiveSchema, RecursiveSchemaAsync, SetSchema, SetSchemaAsync, SpecialSchema, SpecialSchemaAsync, StringSchema, StringSchemaAsync, SymbolSchema, SymbolSchemaAsync, TupleSchema, TupleSchemaAsync, UndefinedSchema, UndefinedSchemaAsync, UnionSchema, UnionSchemaAsync, UnknownSchema, UnknownSchemaAsync, VoidSchema, VoidSchemaAsync } from "../../schemas/index";
import type { Input, Output } from "../../types";
export declare function transformAsync<TSchema extends AnySchema | AnySchemaAsync, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): AnySchemaAsync<TOutput>;
export declare function transformAsync<TSchema extends ArraySchema<any> | ArraySchemaAsync<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): ArraySchemaAsync<TSchema["array"]["item"], TOutput>;
export declare function transformAsync<TSchema extends BigintSchema | BigintSchemaAsync, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): BigintSchemaAsync<TOutput>;
export declare function transformAsync<TSchema extends BooleanSchema | BooleanSchemaAsync, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): BooleanSchemaAsync<TOutput>;
export declare function transformAsync<TSchema extends EnumSchema<any> | EnumSchemaAsync<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): EnumSchemaAsync<TSchema["enum"], TOutput>;
export declare function transformAsync<TSchema extends LiteralSchema<any> | LiteralSchemaAsync<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): LiteralSchemaAsync<TSchema["literal"], TOutput>;
export declare function transformAsync<TSchema extends MapSchema<any, any> | MapSchemaAsync<any, any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): MapSchemaAsync<TSchema["map"]["key"], TSchema["map"]["value"], TOutput>;
export declare function transformAsync<TSchema extends NanSchema | NanSchemaAsync, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): NanSchemaAsync<TOutput>;
export declare function transformAsync<TSchema extends NativeEnumSchema<any> | NativeEnumSchemaAsync<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): NativeEnumSchemaAsync<TSchema["nativeEnum"], TOutput>;
export declare function transformAsync<TSchema extends NeverSchema | NeverSchemaAsync>(schema: TSchema, action: (value: Output<TSchema>) => never): NeverSchemaAsync;
export declare function transformAsync<TSchema extends NonNullableSchema<any> | NonNullableSchemaAsync<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): NonNullableSchemaAsync<TSchema["wrapped"], TOutput>;
export declare function transformAsync<TSchema extends NonNullishSchema<any> | NonNullishSchemaAsync<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): NonNullishSchemaAsync<TSchema["wrapped"], TOutput>;
export declare function transformAsync<TSchema extends NonOptionalSchema<any> | NonOptionalSchemaAsync<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): NonOptionalSchemaAsync<TSchema["wrapped"], TOutput>;
export declare function transformAsync<TSchema extends NullSchema | NullSchemaAsync, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): NullSchemaAsync<TOutput>;
export declare function transformAsync<TSchema extends NullableSchema<any> | NullableSchemaAsync<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): NullableSchemaAsync<TSchema["wrapped"], TOutput>;
export declare function transformAsync<TSchema extends NullishSchema<any> | NullishSchemaAsync<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): NullishSchemaAsync<TSchema["wrapped"], TOutput>;
export declare function transformAsync<TSchema extends NumberSchema | NumberSchemaAsync, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): NumberSchemaAsync<TOutput>;
export declare function transformAsync<TSchema extends ObjectSchema<any> | ObjectSchemaAsync<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): ObjectSchemaAsync<TSchema["object"], TOutput>;
export declare function transformAsync<TSchema extends OptionalSchema<any> | OptionalSchemaAsync<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): OptionalSchemaAsync<TSchema["wrapped"], TOutput>;
export declare function transformAsync<TSchema extends RecordSchema<any, any> | RecordSchemaAsync<any, any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): RecordSchemaAsync<TSchema["record"]["key"], TSchema["record"]["value"], TOutput>;
export declare function transformAsync<TSchema extends RecursiveSchema<any> | RecursiveSchemaAsync<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): RecursiveSchemaAsync<TSchema["getter"], TOutput>;
export declare function transformAsync<TSchema extends SetSchema<any> | SetSchemaAsync<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): SetSchemaAsync<TSchema["set"]["value"], TOutput>;
export declare function transformAsync<TSchema extends SpecialSchema<any> | SpecialSchemaAsync<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): SpecialSchemaAsync<Input<TSchema>, TOutput>;
export declare function transformAsync<TSchema extends StringSchema | StringSchemaAsync, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): StringSchemaAsync<TOutput>;
export declare function transformAsync<TSchema extends SymbolSchema | SymbolSchemaAsync, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): SymbolSchemaAsync<TOutput>;
export declare function transformAsync<TSchema extends TupleSchema<any, any> | TupleSchemaAsync<any, any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): TupleSchemaAsync<TSchema["tuple"]["items"], TSchema["tuple"]["rest"], TOutput>;
export declare function transformAsync<TSchema extends UndefinedSchema | UndefinedSchemaAsync, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): UndefinedSchemaAsync<TOutput>;
export declare function transformAsync<TSchema extends UnionSchema<any> | UnionSchemaAsync<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): UnionSchemaAsync<TSchema["union"], TOutput>;
export declare function transformAsync<TSchema extends UnknownSchema | UnknownSchemaAsync, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): UnknownSchemaAsync<TOutput>;
export declare function transformAsync<TSchema extends VoidSchema | VoidSchemaAsync, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput | Promise<TOutput>): VoidSchemaAsync<TOutput>;
