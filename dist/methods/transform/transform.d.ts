/** @noSelfInFile */
import type { AnySchema, ArraySchema, BigintSchema, BooleanSchema, EnumSchema, InstanceSchema, LiteralSchema, MapSchema, NanSchema, NativeEnumSchema, NeverSchema, NonNullableSchema, NonNullishSchema, NonOptionalSchema, NullSchema, NullableSchema, NullishSchema, NumberSchema, ObjectSchema, OptionalSchema, RecordSchema, RecursiveSchema, SetSchema, SpecialSchema, StringSchema, SymbolSchema, TupleSchema, UndefinedSchema, UnionSchema, UnknownSchema, VoidSchema } from "../../schemas/index";
import type { Input, Output } from "../../types";
export declare function transform<TSchema extends AnySchema, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): AnySchema<TOutput>;
export declare function transform<TSchema extends ArraySchema<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): ArraySchema<TSchema["array"]["item"], TOutput>;
export declare function transform<TSchema extends BigintSchema, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): BigintSchema<TOutput>;
export declare function transform<TSchema extends BooleanSchema, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): BooleanSchema<TOutput>;
export declare function transform<TSchema extends EnumSchema<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): EnumSchema<TSchema["enum"], TOutput>;
export declare function transform<TSchema extends InstanceSchema<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): InstanceSchema<TSchema["class"], TOutput>;
export declare function transform<TSchema extends LiteralSchema<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): LiteralSchema<TSchema["literal"], TOutput>;
export declare function transform<TSchema extends MapSchema<any, any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): MapSchema<TSchema["map"]["key"], TSchema["map"]["value"], TOutput>;
export declare function transform<TSchema extends NanSchema, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): NanSchema<TOutput>;
export declare function transform<TSchema extends NativeEnumSchema<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): NativeEnumSchema<TSchema["nativeEnum"], TOutput>;
export declare function transform<TSchema extends NeverSchema>(schema: TSchema, action: (value: Output<TSchema>) => never): NeverSchema;
export declare function transform<TSchema extends NonNullableSchema<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): NonNullableSchema<TSchema["wrapped"], TOutput>;
export declare function transform<TSchema extends NonNullishSchema<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): NonNullishSchema<TSchema["wrapped"], TOutput>;
export declare function transform<TSchema extends NonOptionalSchema<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): NonOptionalSchema<TSchema["wrapped"], TOutput>;
export declare function transform<TSchema extends NullSchema, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): NullSchema<TOutput>;
export declare function transform<TSchema extends NullableSchema<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): NullableSchema<TSchema["wrapped"], TOutput>;
export declare function transform<TSchema extends NullishSchema<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): NullishSchema<TSchema["wrapped"], TOutput>;
export declare function transform<TSchema extends NumberSchema, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): NumberSchema<TOutput>;
export declare function transform<TSchema extends ObjectSchema<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): ObjectSchema<TSchema["object"], TOutput>;
export declare function transform<TSchema extends OptionalSchema<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): OptionalSchema<TSchema["wrapped"], TOutput>;
export declare function transform<TSchema extends RecordSchema<any, any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): RecordSchema<TSchema["record"]["key"], TSchema["record"]["value"], TOutput>;
export declare function transform<TSchema extends RecursiveSchema<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): RecursiveSchema<TSchema["getter"], TOutput>;
export declare function transform<TSchema extends SetSchema<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): SetSchema<TSchema["set"]["value"], TOutput>;
export declare function transform<TSchema extends SpecialSchema<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): SpecialSchema<Input<TSchema>, TOutput>;
export declare function transform<TSchema extends StringSchema, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): StringSchema<TOutput>;
export declare function transform<TSchema extends SymbolSchema, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): SymbolSchema<TOutput>;
export declare function transform<TSchema extends TupleSchema<any, any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): TupleSchema<TSchema["tuple"]["items"], TSchema["tuple"]["rest"], TOutput>;
export declare function transform<TSchema extends UndefinedSchema, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): UndefinedSchema<TOutput>;
export declare function transform<TSchema extends UnionSchema<any>, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): UnionSchema<TSchema["union"], TOutput>;
export declare function transform<TSchema extends UnknownSchema, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): UnknownSchema<TOutput>;
export declare function transform<TSchema extends VoidSchema, TOutput>(schema: TSchema, action: (value: Output<TSchema>) => TOutput): VoidSchema<TOutput>;
